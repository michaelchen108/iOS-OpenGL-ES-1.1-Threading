{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fnil\fcharset0 Menlo-Bold;\f1\fnil\fcharset0 Menlo-Regular;\f2\fnil\fcharset0 Menlo-Italic;
\f3\fnil\fcharset0 Menlo-BoldItalic;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue128;\red128\green128\blue128;\red102\green14\blue122;
\red0\green0\blue255;\red128\green128\blue0;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\b\fs24 \cf2 package 
\f1\b0 \cf0 com.example.mariok.helloworld;\uc0\u8232 \u8232 
\f0\b \cf2 import 
\f1\b0 \cf0 android.content.Context;\uc0\u8232 
\f0\b \cf2 import 
\f1\b0 \cf0 android.opengl.GLSurfaceView;\uc0\u8232 
\f0\b \cf2 import 
\f1\b0 \cf0 android.opengl.GLU;\uc0\u8232 \u8232 
\f0\b \cf2 import 
\f1\b0 \cf0 java.nio.ByteBuffer;\uc0\u8232 
\f0\b \cf2 import 
\f1\b0 \cf0 java.nio.ByteOrder;\uc0\u8232 
\f0\b \cf2 import 
\f1\b0 \cf0 java.nio.FloatBuffer;\uc0\u8232 \u8232 
\f0\b \cf2 import 
\f1\b0 \cf0 javax.microedition.khronos.egl.EGLConfig;\uc0\u8232 
\f0\b \cf2 import 
\f1\b0 \cf0 javax.microedition.khronos.opengles.GL10;\uc0\u8232 \u8232 
\f2\i \cf3 /**\uc0\u8232  * Created by mariok on 5/7/16.\u8232  *\u8232  * Examples from: https://www3.ntu.edu.sg/home/ehchua/programming/android/Android_3D.html\u8232  */\u8232 
\f0\i0\b \cf2 public class 
\f1\b0 \cf0 TestGLRenderer 
\f0\b \cf2 implements 
\f1\b0 \cf0 GLSurfaceView.Renderer \{\uc0\u8232     Context 
\f0\b \cf4 mContext
\f1\b0 \cf0 ;\uc0\u8232 \u8232     
\f0\b \cf2 private 
\f1\b0 \cf0 Pyramid 
\f0\b \cf4 mPyramid
\f1\b0 \cf0 ;\uc0\u8232     
\f0\b \cf2 private 
\f1\b0 \cf0 Cube 
\f0\b \cf4 mCube
\f1\b0 \cf0 ;\uc0\u8232 \u8232     
\f0\b \cf2 private static float 
\f2\i\b0 \cf4 mAnglePyramid 
\f1\i0 \cf0 = \cf5 0\cf0 ; 
\f2\i \cf3 // Rotational angle in degree for mPyramid\uc0\u8232     
\f0\i0\b \cf2 private static float 
\f2\i\b0 \cf4 mAngleCube 
\f1\i0 \cf0 = \cf5 0\cf0 ;    
\f2\i \cf3 // Rotational angle in degree for mCube\uc0\u8232     
\f0\i0\b \cf2 private static float 
\f2\i\b0 \cf4 mSpeedPyramid 
\f1\i0 \cf0 = \cf5 2.0f\cf0 ; 
\f2\i \cf3 // Rotational speed for mPyramid\uc0\u8232     
\f0\i0\b \cf2 private static float 
\f2\i\b0 \cf4 mSpeedCube 
\f1\i0 \cf0 = -\cf5 1.5f\cf0 ;   
\f2\i \cf3 // Rotational speed for mCube\uc0\u8232 \u8232     
\f0\i0\b \cf2 public 
\f1\b0 \cf0 TestGLRenderer(Context context) \{\uc0\u8232         
\f0\b \cf4 mContext 
\f1\b0 \cf0 = context;\uc0\u8232 \u8232         
\f0\b \cf4 mPyramid 
\f1\b0 \cf0 = 
\f0\b \cf2 new 
\f1\b0 \cf0 Pyramid();\uc0\u8232         
\f0\b \cf4 mCube 
\f1\b0 \cf0 = 
\f0\b \cf2 new 
\f1\b0 \cf0 Cube();\uc0\u8232     \}\u8232 \u8232     \cf6 @Override\uc0\u8232     
\f0\b \cf2 public void 
\f1\b0 \cf0 onSurfaceCreated(GL10 gl, EGLConfig config) \{\uc0\u8232         gl.glClearColor(\cf5 0.0f\cf0 , \cf5 0.0f\cf0 , \cf5 0.0f\cf0 , \cf5 1.0f\cf0 );  
\f2\i \cf3 // Set color's clear-value to black\uc0\u8232         
\f1\i0 \cf0 gl.glClearDepthf(\cf5 1.0f\cf0 );            
\f2\i \cf3 // Set depth's clear-value to farthest\uc0\u8232         
\f1\i0 \cf0 gl.glEnable(GL10.
\f3\i\b \cf4 GL_DEPTH_TEST
\f1\i0\b0 \cf0 );   
\f2\i \cf3 // Enables depth-buffer for hidden surface removal\uc0\u8232         
\f1\i0 \cf0 gl.glDepthFunc(GL10.
\f3\i\b \cf4 GL_LEQUAL
\f1\i0\b0 \cf0 );    
\f2\i \cf3 // The type of depth testing to do\uc0\u8232         
\f1\i0 \cf0 gl.glHint(GL10.
\f3\i\b \cf4 GL_PERSPECTIVE_CORRECTION_HINT
\f1\i0\b0 \cf0 , GL10.
\f3\i\b \cf4 GL_NICEST
\f1\i0\b0 \cf0 );  
\f2\i \cf3 // nice perspective view\uc0\u8232         
\f1\i0 \cf0 gl.glShadeModel(GL10.
\f3\i\b \cf4 GL_SMOOTH
\f1\i0\b0 \cf0 );   
\f2\i \cf3 // Enable smooth shading of color\uc0\u8232         
\f1\i0 \cf0 gl.glDisable(GL10.
\f3\i\b \cf4 GL_DITHER
\f1\i0\b0 \cf0 );      
\f2\i \cf3 // Disable dithering for better performance\uc0\u8232     
\f1\i0 \cf0 \}\uc0\u8232 \u8232     \cf6 @Override\uc0\u8232     
\f0\b \cf2 public void 
\f1\b0 \cf0 onSurfaceChanged(GL10 gl, 
\f0\b \cf2 int 
\f1\b0 \cf0 width, 
\f0\b \cf2 int 
\f1\b0 \cf0 height) \{\uc0\u8232         
\f0\b \cf2 if 
\f1\b0 \cf0 (height == \cf5 0\cf0 ) height = \cf5 1\cf0 ;   
\f2\i \cf3 // To prevent divide by zero\uc0\u8232         
\f0\i0\b \cf2 float 
\f1\b0 \cf0 aspect = (
\f0\b \cf2 float
\f1\b0 \cf0 )width / height;\uc0\u8232 \u8232         
\f2\i \cf3 // Set the viewport (display area) to cover the entire window\uc0\u8232         
\f1\i0 \cf0 gl.glViewport(\cf5 0\cf0 , \cf5 0\cf0 , width, height);\uc0\u8232 \u8232         
\f2\i \cf3 // Setup perspective projection, with aspect ratio matches viewport\uc0\u8232         
\f1\i0 \cf0 gl.glMatrixMode(GL10.
\f3\i\b \cf4 GL_PROJECTION
\f1\i0\b0 \cf0 ); 
\f2\i \cf3 // Select projection matrix\uc0\u8232         
\f1\i0 \cf0 gl.glLoadIdentity();                 
\f2\i \cf3 // Reset projection matrix\uc0\u8232         // Use perspective projection\u8232         
\f1\i0 \cf0 GLU.
\f2\i gluPerspective
\f1\i0 (gl, \cf5 45\cf0 , aspect, \cf5 0.1f\cf0 , \cf5 100.f\cf0 );\uc0\u8232 \u8232         gl.glMatrixMode(GL10.
\f3\i\b \cf4 GL_MODELVIEW
\f1\i0\b0 \cf0 );  
\f2\i \cf3 // Select model-view matrix\uc0\u8232         
\f1\i0 \cf0 gl.glLoadIdentity();                 
\f2\i \cf3 // Reset\uc0\u8232     
\f1\i0 \cf0 \}\uc0\u8232 \u8232     \cf6 @Override\uc0\u8232     
\f0\b \cf2 public void 
\f1\b0 \cf0 onDrawFrame(GL10 gl) \{\uc0\u8232         
\f2\i \cf3 // Clear color and depth buffers using clear-value set earlier\uc0\u8232         
\f1\i0 \cf0 gl.glClear(GL10.
\f3\i\b \cf4 GL_COLOR_BUFFER_BIT 
\f1\i0\b0 \cf0 | GL10.
\f3\i\b \cf4 GL_DEPTH_BUFFER_BIT
\f1\i0\b0 \cf0 );\uc0\u8232 \u8232         
\f2\i \cf3 // ----- Render the Pyramid -----\uc0\u8232         
\f1\i0 \cf0 gl.glLoadIdentity();                 
\f2\i \cf3 // Reset the model-view matrix\uc0\u8232         
\f1\i0 \cf0 gl.glTranslatef(-\cf5 1.5f\cf0 , \cf5 0.0f\cf0 , -\cf5 6.0f\cf0 ); 
\f2\i \cf3 // Translate left and into the screen\uc0\u8232         
\f1\i0 \cf0 gl.glRotatef(
\f2\i \cf4 mAnglePyramid
\f1\i0 \cf0 , \cf5 0.1f\cf0 , \cf5 1.0f\cf0 , -\cf5 0.1f\cf0 ); 
\f2\i \cf3 // Rotate\uc0\u8232         
\f0\i0\b \cf4 mPyramid
\f1\b0 \cf0 .draw(gl);                              
\f2\i \cf3 // Draw the mPyramid\uc0\u8232 \u8232         // ----- Render the Color Cube -----\u8232         
\f1\i0 \cf0 gl.glLoadIdentity();                
\f2\i \cf3 // Reset the model-view matrix\uc0\u8232         
\f1\i0 \cf0 gl.glTranslatef(\cf5 1.5f\cf0 , \cf5 0.0f\cf0 , -\cf5 6.0f\cf0 ); 
\f2\i \cf3 // Translate right and into the screen\uc0\u8232         
\f1\i0 \cf0 gl.glScalef(\cf5 0.8f\cf0 , \cf5 0.8f\cf0 , \cf5 0.8f\cf0 );      
\f2\i \cf3 // Scale down\uc0\u8232         
\f1\i0 \cf0 gl.glRotatef(
\f2\i \cf4 mAngleCube
\f1\i0 \cf0 , \cf5 1.0f\cf0 , \cf5 1.0f\cf0 , \cf5 1.0f\cf0 ); 
\f2\i \cf3 // rotate about the axis (1,1,1)\uc0\u8232         
\f0\i0\b \cf4 mCube
\f1\b0 \cf0 .draw(gl);                      
\f2\i \cf3 // Draw the mCube\uc0\u8232 \u8232         // Update the rotational angle after each refresh\u8232         \cf4 mAnglePyramid 
\f1\i0 \cf0 += 
\f2\i \cf4 mSpeedPyramid
\f1\i0 \cf0 ;\uc0\u8232         
\f2\i \cf4 mAngleCube 
\f1\i0 \cf0 += 
\f2\i \cf4 mSpeedCube
\f1\i0 \cf0 ;\uc0\u8232     \}\u8232 \}\u8232 \u8232 
\f0\b \cf2 class 
\f1\b0 \cf0 Pyramid \{\uc0\u8232     
\f0\b \cf2 private 
\f1\b0 \cf0 FloatBuffer 
\f0\b \cf4 vertexBuffer
\f1\b0 \cf0 ;  
\f2\i \cf3 // Buffer for vertex-array\uc0\u8232     
\f0\i0\b \cf2 private 
\f1\b0 \cf0 FloatBuffer 
\f0\b \cf4 colorBuffer
\f1\b0 \cf0 ;   
\f2\i \cf3 // Buffer for color-array\uc0\u8232     
\f0\i0\b \cf2 private 
\f1\b0 \cf0 ByteBuffer 
\f0\b \cf4 indexBuffer
\f1\b0 \cf0 ;    
\f2\i \cf3 // Buffer for index-array\uc0\u8232 \u8232     
\f0\i0\b \cf2 private float
\f1\b0 \cf0 [] 
\f0\b \cf4 vertices 
\f1\b0 \cf0 = \{ 
\f2\i \cf3 // 5 vertices of the mPyramid in (x,y,z)\uc0\u8232             
\f1\i0 \cf0 -\cf5 1.0f\cf0 , -\cf5 1.0f\cf0 , -\cf5 1.0f\cf0 ,  
\f2\i \cf3 // 0. left-bottom-back\uc0\u8232             
\f1\i0 \cf5 1.0f\cf0 , -\cf5 1.0f\cf0 , -\cf5 1.0f\cf0 ,  
\f2\i \cf3 // 1. right-bottom-back\uc0\u8232             
\f1\i0 \cf5 1.0f\cf0 , -\cf5 1.0f\cf0 ,  \cf5 1.0f\cf0 ,  
\f2\i \cf3 // 2. right-bottom-front\uc0\u8232             
\f1\i0 \cf0 -\cf5 1.0f\cf0 , -\cf5 1.0f\cf0 ,  \cf5 1.0f\cf0 ,  
\f2\i \cf3 // 3. left-bottom-front\uc0\u8232             
\f1\i0 \cf5 0.0f\cf0 ,  \cf5 1.0f\cf0 ,  \cf5 0.0f   
\f2\i \cf3 // 4. top\uc0\u8232     
\f1\i0 \cf0 \};\uc0\u8232 \u8232     
\f0\b \cf2 private float
\f1\b0 \cf0 [] 
\f0\b \cf4 colors 
\f1\b0 \cf0 = \{  
\f2\i \cf3 // Colors of the 5 vertices in RGBA\uc0\u8232             
\f1\i0 \cf5 0.0f\cf0 , \cf5 0.0f\cf0 , \cf5 1.0f\cf0 , \cf5 1.0f\cf0 ,  
\f2\i \cf3 // 0. blue\uc0\u8232             
\f1\i0 \cf5 0.0f\cf0 , \cf5 1.0f\cf0 , \cf5 0.0f\cf0 , \cf5 1.0f\cf0 ,  
\f2\i \cf3 // 1. green\uc0\u8232             
\f1\i0 \cf5 0.0f\cf0 , \cf5 0.0f\cf0 , \cf5 1.0f\cf0 , \cf5 1.0f\cf0 ,  
\f2\i \cf3 // 2. blue\uc0\u8232             
\f1\i0 \cf5 0.0f\cf0 , \cf5 1.0f\cf0 , \cf5 0.0f\cf0 , \cf5 1.0f\cf0 ,  
\f2\i \cf3 // 3. green\uc0\u8232             
\f1\i0 \cf5 1.0f\cf0 , \cf5 0.0f\cf0 , \cf5 0.0f\cf0 , \cf5 1.0f   
\f2\i \cf3 // 4. red\uc0\u8232     
\f1\i0 \cf0 \};\uc0\u8232 \u8232     
\f0\b \cf2 private byte
\f1\b0 \cf0 [] 
\f0\b \cf4 indices 
\f1\b0 \cf0 = \{ 
\f2\i \cf3 // Vertex indices of the 4 Triangles\uc0\u8232             
\f1\i0 \cf5 2\cf0 , \cf5 4\cf0 , \cf5 3\cf0 ,   
\f2\i \cf3 // front face (CCW)\uc0\u8232             
\f1\i0 \cf5 1\cf0 , \cf5 4\cf0 , \cf5 2\cf0 ,   
\f2\i \cf3 // right face\uc0\u8232             
\f1\i0 \cf5 0\cf0 , \cf5 4\cf0 , \cf5 1\cf0 ,   
\f2\i \cf3 // back face\uc0\u8232             
\f1\i0 \cf5 4\cf0 , \cf5 0\cf0 , \cf5 3    
\f2\i \cf3 // left face\uc0\u8232     
\f1\i0 \cf0 \};\uc0\u8232 \u8232     
\f2\i \cf3 // Constructor - Set up the buffers\uc0\u8232     
\f0\i0\b \cf2 public 
\f1\b0 \cf0 Pyramid() \{\uc0\u8232         
\f2\i \cf3 // Setup vertex-array buffer. Vertices in float. An float has 4 bytes\uc0\u8232         
\f1\i0 \cf0 ByteBuffer vbb = ByteBuffer.
\f2\i allocateDirect
\f1\i0 (
\f0\b \cf4 vertices
\f1\b0 \cf0 .
\f0\b \cf4 length 
\f1\b0 \cf0 * \cf5 4\cf0 );\uc0\u8232         vbb.order(ByteOrder.
\f2\i nativeOrder
\f1\i0 ()); 
\f2\i \cf3 // Use native byte order\uc0\u8232         
\f0\i0\b \cf4 vertexBuffer 
\f1\b0 \cf0 = vbb.asFloatBuffer(); 
\f2\i \cf3 // Convert from byte to float\uc0\u8232         
\f0\i0\b \cf4 vertexBuffer
\f1\b0 \cf0 .put(
\f0\b \cf4 vertices
\f1\b0 \cf0 );         
\f2\i \cf3 // Copy data into buffer\uc0\u8232         
\f0\i0\b \cf4 vertexBuffer
\f1\b0 \cf0 .position(\cf5 0\cf0 );           
\f2\i \cf3 // Rewind\uc0\u8232 \u8232         // Setup color-array buffer. Colors in float. An float has 4 bytes\u8232         
\f1\i0 \cf0 ByteBuffer cbb = ByteBuffer.
\f2\i allocateDirect
\f1\i0 (
\f0\b \cf4 colors
\f1\b0 \cf0 .
\f0\b \cf4 length 
\f1\b0 \cf0 * \cf5 4\cf0 );\uc0\u8232         cbb.order(ByteOrder.
\f2\i nativeOrder
\f1\i0 ());\uc0\u8232         
\f0\b \cf4 colorBuffer 
\f1\b0 \cf0 = cbb.asFloatBuffer();\uc0\u8232         
\f0\b \cf4 colorBuffer
\f1\b0 \cf0 .put(
\f0\b \cf4 colors
\f1\b0 \cf0 );\uc0\u8232         
\f0\b \cf4 colorBuffer
\f1\b0 \cf0 .position(\cf5 0\cf0 );\uc0\u8232 \u8232         
\f2\i \cf3 // Setup index-array buffer. Indices in byte.\uc0\u8232         
\f0\i0\b \cf4 indexBuffer 
\f1\b0 \cf0 = ByteBuffer.
\f2\i allocateDirect
\f1\i0 (
\f0\b \cf4 indices
\f1\b0 \cf0 .
\f0\b \cf4 length
\f1\b0 \cf0 );\uc0\u8232         
\f0\b \cf4 indexBuffer
\f1\b0 \cf0 .put(
\f0\b \cf4 indices
\f1\b0 \cf0 );\uc0\u8232         
\f0\b \cf4 indexBuffer
\f1\b0 \cf0 .position(\cf5 0\cf0 );\uc0\u8232     \}\u8232 \u8232     
\f2\i \cf3 // Draw the shape\uc0\u8232     
\f0\i0\b \cf2 public void 
\f1\b0 \cf0 draw(GL10 gl) \{\uc0\u8232         gl.glFrontFace(GL10.
\f3\i\b \cf4 GL_CCW
\f1\i0\b0 \cf0 );  
\f2\i \cf3 // Front face in counter-clockwise orientation\uc0\u8232 \u8232         // Enable arrays and define their buffers\u8232         
\f1\i0 \cf0 gl.glEnableClientState(GL10.
\f3\i\b \cf4 GL_VERTEX_ARRAY
\f1\i0\b0 \cf0 );\uc0\u8232         gl.glVertexPointer(\cf5 3\cf0 , GL10.
\f3\i\b \cf4 GL_FLOAT
\f1\i0\b0 \cf0 , \cf5 0\cf0 , 
\f0\b \cf4 vertexBuffer
\f1\b0 \cf0 );\uc0\u8232         gl.glEnableClientState(GL10.
\f3\i\b \cf4 GL_COLOR_ARRAY
\f1\i0\b0 \cf0 );\uc0\u8232         gl.glColorPointer(\cf5 4\cf0 , GL10.
\f3\i\b \cf4 GL_FLOAT
\f1\i0\b0 \cf0 , \cf5 0\cf0 , 
\f0\b \cf4 colorBuffer
\f1\b0 \cf0 );\uc0\u8232 \u8232         gl.glDrawElements(GL10.
\f3\i\b \cf4 GL_TRIANGLES
\f1\i0\b0 \cf0 , 
\f0\b \cf4 indices
\f1\b0 \cf0 .
\f0\b \cf4 length
\f1\b0 \cf0 , GL10.
\f3\i\b \cf4 GL_UNSIGNED_BYTE
\f1\i0\b0 \cf0 , 
\f0\b \cf4 indexBuffer
\f1\b0 \cf0 );\uc0\u8232 \u8232         gl.glDisableClientState(GL10.
\f3\i\b \cf4 GL_VERTEX_ARRAY
\f1\i0\b0 \cf0 );\uc0\u8232         gl.glDisableClientState(GL10.
\f3\i\b \cf4 GL_COLOR_ARRAY
\f1\i0\b0 \cf0 );\uc0\u8232     \}\u8232 \}\u8232 \u8232 
\f0\b \cf2 class 
\f1\b0 \cf0 Cube \{\uc0\u8232     
\f0\b \cf2 private 
\f1\b0 \cf0 FloatBuffer 
\f0\b \cf4 vertexBuffer
\f1\b0 \cf0 ;  
\f2\i \cf3 // Buffer for vertex-array\uc0\u8232     
\f0\i0\b \cf2 private int \cf4 numFaces 
\f1\b0 \cf0 = \cf5 6\cf0 ;\uc0\u8232 \u8232     
\f0\b \cf2 private float
\f1\b0 \cf0 [][] 
\f0\b \cf4 colors 
\f1\b0 \cf0 = \{  
\f2\i \cf3 // Colors of the 6 faces\uc0\u8232             
\f1\i0 \cf0 \{\cf5 1.0f\cf0 , \cf5 0.5f\cf0 , \cf5 0.0f\cf0 , \cf5 1.0f\cf0 \},  
\f2\i \cf3 // 0. orange\uc0\u8232             
\f1\i0 \cf0 \{\cf5 1.0f\cf0 , \cf5 0.0f\cf0 , \cf5 1.0f\cf0 , \cf5 1.0f\cf0 \},  
\f2\i \cf3 // 1. violet\uc0\u8232             
\f1\i0 \cf0 \{\cf5 0.0f\cf0 , \cf5 1.0f\cf0 , \cf5 0.0f\cf0 , \cf5 1.0f\cf0 \},  
\f2\i \cf3 // 2. green\uc0\u8232             
\f1\i0 \cf0 \{\cf5 0.0f\cf0 , \cf5 0.0f\cf0 , \cf5 1.0f\cf0 , \cf5 1.0f\cf0 \},  
\f2\i \cf3 // 3. blue\uc0\u8232             
\f1\i0 \cf0 \{\cf5 1.0f\cf0 , \cf5 0.0f\cf0 , \cf5 0.0f\cf0 , \cf5 1.0f\cf0 \},  
\f2\i \cf3 // 4. red\uc0\u8232             
\f1\i0 \cf0 \{\cf5 1.0f\cf0 , \cf5 1.0f\cf0 , \cf5 0.0f\cf0 , \cf5 1.0f\cf0 \}   
\f2\i \cf3 // 5. yellow\uc0\u8232     
\f1\i0 \cf0 \};\uc0\u8232 \u8232     
\f0\b \cf2 private float
\f1\b0 \cf0 [] 
\f0\b \cf4 vertices 
\f1\b0 \cf0 = \{  
\f2\i \cf3 // Vertices of the 6 faces\uc0\u8232             // FRONT\u8232             
\f1\i0 \cf0 -\cf5 1.0f\cf0 , -\cf5 1.0f\cf0 ,  \cf5 1.0f\cf0 ,  
\f2\i \cf3 // 0. left-bottom-front\uc0\u8232             
\f1\i0 \cf5 1.0f\cf0 , -\cf5 1.0f\cf0 ,  \cf5 1.0f\cf0 ,  
\f2\i \cf3 // 1. right-bottom-front\uc0\u8232             
\f1\i0 \cf0 -\cf5 1.0f\cf0 ,  \cf5 1.0f\cf0 ,  \cf5 1.0f\cf0 ,  
\f2\i \cf3 // 2. left-top-front\uc0\u8232             
\f1\i0 \cf5 1.0f\cf0 ,  \cf5 1.0f\cf0 ,  \cf5 1.0f\cf0 ,  
\f2\i \cf3 // 3. right-top-front\uc0\u8232             // BACK\u8232             
\f1\i0 \cf5 1.0f\cf0 , -\cf5 1.0f\cf0 , -\cf5 1.0f\cf0 ,  
\f2\i \cf3 // 6. right-bottom-back\uc0\u8232             
\f1\i0 \cf0 -\cf5 1.0f\cf0 , -\cf5 1.0f\cf0 , -\cf5 1.0f\cf0 ,  
\f2\i \cf3 // 4. left-bottom-back\uc0\u8232             
\f1\i0 \cf5 1.0f\cf0 ,  \cf5 1.0f\cf0 , -\cf5 1.0f\cf0 ,  
\f2\i \cf3 // 7. right-top-back\uc0\u8232             
\f1\i0 \cf0 -\cf5 1.0f\cf0 ,  \cf5 1.0f\cf0 , -\cf5 1.0f\cf0 ,  
\f2\i \cf3 // 5. left-top-back\uc0\u8232             // LEFT\u8232             
\f1\i0 \cf0 -\cf5 1.0f\cf0 , -\cf5 1.0f\cf0 , -\cf5 1.0f\cf0 ,  
\f2\i \cf3 // 4. left-bottom-back\uc0\u8232             
\f1\i0 \cf0 -\cf5 1.0f\cf0 , -\cf5 1.0f\cf0 ,  \cf5 1.0f\cf0 ,  
\f2\i \cf3 // 0. left-bottom-front\uc0\u8232             
\f1\i0 \cf0 -\cf5 1.0f\cf0 ,  \cf5 1.0f\cf0 , -\cf5 1.0f\cf0 ,  
\f2\i \cf3 // 5. left-top-back\uc0\u8232             
\f1\i0 \cf0 -\cf5 1.0f\cf0 ,  \cf5 1.0f\cf0 ,  \cf5 1.0f\cf0 ,  
\f2\i \cf3 // 2. left-top-front\uc0\u8232             // RIGHT\u8232             
\f1\i0 \cf5 1.0f\cf0 , -\cf5 1.0f\cf0 ,  \cf5 1.0f\cf0 ,  
\f2\i \cf3 // 1. right-bottom-front\uc0\u8232             
\f1\i0 \cf5 1.0f\cf0 , -\cf5 1.0f\cf0 , -\cf5 1.0f\cf0 ,  
\f2\i \cf3 // 6. right-bottom-back\uc0\u8232             
\f1\i0 \cf5 1.0f\cf0 ,  \cf5 1.0f\cf0 ,  \cf5 1.0f\cf0 ,  
\f2\i \cf3 // 3. right-top-front\uc0\u8232             
\f1\i0 \cf5 1.0f\cf0 ,  \cf5 1.0f\cf0 , -\cf5 1.0f\cf0 ,  
\f2\i \cf3 // 7. right-top-back\uc0\u8232             // TOP\u8232             
\f1\i0 \cf0 -\cf5 1.0f\cf0 ,  \cf5 1.0f\cf0 ,  \cf5 1.0f\cf0 ,  
\f2\i \cf3 // 2. left-top-front\uc0\u8232             
\f1\i0 \cf5 1.0f\cf0 ,  \cf5 1.0f\cf0 ,  \cf5 1.0f\cf0 ,  
\f2\i \cf3 // 3. right-top-front\uc0\u8232             
\f1\i0 \cf0 -\cf5 1.0f\cf0 ,  \cf5 1.0f\cf0 , -\cf5 1.0f\cf0 ,  
\f2\i \cf3 // 5. left-top-back\uc0\u8232             
\f1\i0 \cf5 1.0f\cf0 ,  \cf5 1.0f\cf0 , -\cf5 1.0f\cf0 ,  
\f2\i \cf3 // 7. right-top-back\uc0\u8232             // BOTTOM\u8232             
\f1\i0 \cf0 -\cf5 1.0f\cf0 , -\cf5 1.0f\cf0 , -\cf5 1.0f\cf0 ,  
\f2\i \cf3 // 4. left-bottom-back\uc0\u8232             
\f1\i0 \cf5 1.0f\cf0 , -\cf5 1.0f\cf0 , -\cf5 1.0f\cf0 ,  
\f2\i \cf3 // 6. right-bottom-back\uc0\u8232             
\f1\i0 \cf0 -\cf5 1.0f\cf0 , -\cf5 1.0f\cf0 ,  \cf5 1.0f\cf0 ,  
\f2\i \cf3 // 0. left-bottom-front\uc0\u8232             
\f1\i0 \cf5 1.0f\cf0 , -\cf5 1.0f\cf0 ,  \cf5 1.0f   
\f2\i \cf3 // 1. right-bottom-front\uc0\u8232     
\f1\i0 \cf0 \};\uc0\u8232 \u8232     
\f2\i \cf3 // Constructor - Set up the buffers\uc0\u8232     
\f0\i0\b \cf2 public 
\f1\b0 \cf0 Cube() \{\uc0\u8232         
\f2\i \cf3 // Setup vertex-array buffer. Vertices in float. An float has 4 bytes\uc0\u8232         
\f1\i0 \cf0 ByteBuffer vbb = ByteBuffer.
\f2\i allocateDirect
\f1\i0 (
\f0\b \cf4 vertices
\f1\b0 \cf0 .
\f0\b \cf4 length 
\f1\b0 \cf0 * \cf5 4\cf0 );\uc0\u8232         vbb.order(ByteOrder.
\f2\i nativeOrder
\f1\i0 ()); 
\f2\i \cf3 // Use native byte order\uc0\u8232         
\f0\i0\b \cf4 vertexBuffer 
\f1\b0 \cf0 = vbb.asFloatBuffer(); 
\f2\i \cf3 // Convert from byte to float\uc0\u8232         
\f0\i0\b \cf4 vertexBuffer
\f1\b0 \cf0 .put(
\f0\b \cf4 vertices
\f1\b0 \cf0 );         
\f2\i \cf3 // Copy data into buffer\uc0\u8232         
\f0\i0\b \cf4 vertexBuffer
\f1\b0 \cf0 .position(\cf5 0\cf0 );           
\f2\i \cf3 // Rewind\uc0\u8232     
\f1\i0 \cf0 \}\uc0\u8232 \u8232     
\f2\i \cf3 // Draw the shape\uc0\u8232     
\f0\i0\b \cf2 public void 
\f1\b0 \cf0 draw(GL10 gl) \{\uc0\u8232         gl.glFrontFace(GL10.
\f3\i\b \cf4 GL_CCW
\f1\i0\b0 \cf0 );    
\f2\i \cf3 // Front face in counter-clockwise orientation\uc0\u8232         
\f1\i0 \cf0 gl.glEnable(GL10.
\f3\i\b \cf4 GL_CULL_FACE
\f1\i0\b0 \cf0 ); 
\f2\i \cf3 // Enable cull face\uc0\u8232         
\f1\i0 \cf0 gl.glCullFace(GL10.
\f3\i\b \cf4 GL_BACK
\f1\i0\b0 \cf0 );    
\f2\i \cf3 // Cull the back face (don't display)\uc0\u8232 \u8232         
\f1\i0 \cf0 gl.glEnableClientState(GL10.
\f3\i\b \cf4 GL_VERTEX_ARRAY
\f1\i0\b0 \cf0 );\uc0\u8232         gl.glVertexPointer(\cf5 3\cf0 , GL10.
\f3\i\b \cf4 GL_FLOAT
\f1\i0\b0 \cf0 , \cf5 0\cf0 , 
\f0\b \cf4 vertexBuffer
\f1\b0 \cf0 );\uc0\u8232 \u8232         
\f2\i \cf3 // Render all the faces\uc0\u8232         
\f0\i0\b \cf2 for 
\f1\b0 \cf0 (
\f0\b \cf2 int 
\f1\b0 \cf0 face = \cf5 0\cf0 ; face < 
\f0\b \cf4 numFaces
\f1\b0 \cf0 ; face++) \{\uc0\u8232             
\f2\i \cf3 // Set the color for each of the faces\uc0\u8232             
\f1\i0 \cf0 gl.glColor4f(
\f0\b \cf4 colors
\f1\b0 \cf0 [face][\cf5 0\cf0 ], 
\f0\b \cf4 colors
\f1\b0 \cf0 [face][\cf5 1\cf0 ], 
\f0\b \cf4 colors
\f1\b0 \cf0 [face][\cf5 2\cf0 ], 
\f0\b \cf4 colors
\f1\b0 \cf0 [face][\cf5 3\cf0 ]);\uc0\u8232             
\f2\i \cf3 // Draw the primitive from the vertex-array directly\uc0\u8232             
\f1\i0 \cf0 gl.glDrawArrays(GL10.
\f3\i\b \cf4 GL_TRIANGLE_STRIP
\f1\i0\b0 \cf0 , face*\cf5 4\cf0 , \cf5 4\cf0 );\uc0\u8232         \}\u8232         gl.glDisableClientState(GL10.
\f3\i\b \cf4 GL_VERTEX_ARRAY
\f1\i0\b0 \cf0 );\uc0\u8232         gl.glDisable(GL10.
\f3\i\b \cf4 GL_CULL_FACE
\f1\i0\b0 \cf0 );\uc0\u8232     \}\u8232 \}\
}